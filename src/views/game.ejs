<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>Quiz Buzzer – <%= username %>
	</title>

	<link href="https://fonts.googleapis.com/css2?family=Fredoka:wght@400;500;600;700&display=swap" rel="stylesheet">
	<link rel="stylesheet" href="/game.css">
</head>
<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>Quiz Buzzer – <%= username %>
	</title>
	<link href="https://fonts.googleapis.com/css2?family=Fredoka:wght@400;500;600;700&display=swap" rel="stylesheet">
	<link rel="stylesheet" href="/game.css">
</head>

<body>
	<!-- Jeopardy Board (Desktop only) -->
	<div class="jeopardy-board desktop-only">
		<!-- Column Headers -->
		<div class="jeopardy-row jeopardy-header-row">
			<div class="jeopardy-header">Boom! Action</div>
			<div class="jeopardy-header">Laugh Attack</div>
			<div class="jeopardy-header">Creepy & Weird</div>
			<div class="jeopardy-header">Tears & Feels</div>
			<div class="jeopardy-header">Space & Sci-Fry</div>
		</div>
		<!-- Game Grid -->
		<% for(let row=1; row <=5; row++) { %>
			<div class="jeopardy-row">
				<% for(let col=1; col <=5; col++) { %>
					<div class="jeopardy-cell" data-id="r<%= row %>c<%= col %>">
						<%= row * 100 %>
					</div>
					<% } %>
			</div>
			<% } %>
				<div class="jeopardy-reset">
					<button onclick="resetBoard()">Reset Board</button>
				</div>
				<div id="imageModal">
					<button onclick="closeModal()">Close</button>
					<img id="modalImage" src="" alt="Revealed Image">
				</div>
	</div>

	<!-- Game UI (mobile only) -->
	<div class="game-container mobile-only">
		<div class="header-card">
			<div class="username-display">😑 <%= username %>
			</div>
			<div id="connectionStatus" class="connection-status reconnecting">
				<span>🔌</span>
				<span>Connecting to the fun center...</span>
			</div>
		</div>
		<div class="status-card">
			<div id="status" class="game-status">Preparing for battle...</div>
			<div id="playerList" class="player-list">Loading players...</div>
		</div>
		<div class="buzzer-card">
			<div class="buzzer-container">
				<% if (username==='Master' ) { %>
					<button id="startBtn" class="start-btn">
						<span>🎉 Start the Show</span>
					</button>
					<% } %>
						<button id="tapBtn" class="buzz-button" disabled>
							<span>🚨 BUZZ</span>
						</button>
			</div>
		</div>
		<div class="actions-card">
			<div class="action-buttons">
				<button class="action-btn" onclick="changeUsername()">🔀 Change Name</button>
				<button class="action-btn" onclick="refreshConnection()">🔄 Refresh</button>
			</div>
		</div>
		<div class="fun-footer">
			<p>✨ Quick on the buzz = bragging rights for life! ✨</p>
		</div>
	</div>

	<script>
		const STORAGE_KEY = 'quiz_buzzer_username';
		const username = "<%= username %>";
		localStorage.setItem(STORAGE_KEY, username);

		const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
		let ws = null;
		let reconnectAttempts = 0;
		const maxReconnectAttempts = 5;
		let reconnectTimeout = null;

		const status = document.getElementById('status');
		const playerList = document.getElementById('playerList');
		const tapBtn = document.getElementById('tapBtn');
		const startBtn = document.getElementById('startBtn');
		const connectionStatus = document.getElementById('connectionStatus');

		function updateConnectionStatus(type, icon, message) {
			connectionStatus.className = `connection-status ${type}`;
			connectionStatus.innerHTML = `<span>${icon}</span><span>${message}</span>`;
		}

		function connect() {
			if (ws && ws.readyState === WebSocket.OPEN) ws.close();
			ws = new WebSocket(`${protocol}//${window.location.host}/?username=${encodeURIComponent(username)}`);

			ws.onopen = () => {
				reconnectAttempts = 0;
				updateConnectionStatus('connected', '🎯', 'Connected & Ready!');
				status.innerText = "🎯 Ready to play!";
			};

			ws.onmessage = (event) => {
				const data = JSON.parse(event.data);
				switch (data.type) {
					case 'gameState':
						status.innerText = `🎮 Game state: ${data.state}`;
						break;
					case 'players':
						playerList.innerText = `👥 Players: ${data.players.join(', ')}`;
						break;
					case 'gameStart':
						status.innerText = `🎉 Countdown: ${data.countdown}`;
						if (startBtn) {
							startBtn.disabled = true;
							startBtn.classList.remove('pulse');
						}
						break;
					case 'countdown':
						status.innerText = `⏱ Starting in... ${data.count}`;
						status.classList.add('pulse');
						break;
					case 'gameActive':
						status.innerText = `🚨 BUZZ NOW!`;
						status.classList.remove('pulse');
						tapBtn.disabled = false;
						tapBtn.classList.add('pulse');
						break;
					case 'winner':
						tapBtn.disabled = true;
						tapBtn.classList.remove('pulse');
						status.innerText = `🏆 ${data.winner} wins! (${data.timestamp}ms)`;
						if (startBtn) {
							startBtn.disabled = false;
							startBtn.classList.add('pulse');
						}
						break;
					case 'gameReset':
						status.innerText = `🔄 Game reset. Ready for round 2!`;
						tapBtn.disabled = true;
						tapBtn.classList.remove('pulse');
						if (startBtn) {
							startBtn.disabled = false;
							startBtn.classList.add('pulse');
						}
						break;
					case 'error':
						if (data.message.includes('Username taken')) {
							alert('⚠️ Username already taken! Please choose a different name.');
							changeUsername();
						} else {
							alert(`Error: ${data.message}`);
						}
						break;
				}
			};

			ws.onclose = () => {
				updateConnectionStatus('disconnected', '❌', 'Disconnected');
				status.innerText = "Connection lost...";
				tapBtn.disabled = true;
				if (startBtn) startBtn.disabled = true;
				if (reconnectAttempts < maxReconnectAttempts) {
					reconnectAttempts++;
					updateConnectionStatus('reconnecting', '🔄', `Reconnecting... (${reconnectAttempts}/${maxReconnectAttempts})`);
					reconnectTimeout = setTimeout(connect, 2000 * reconnectAttempts);
				} else {
					updateConnectionStatus('disconnected', '❌', 'Connection failed. Please refresh!');
				}
			};
			ws.onerror = (error) => {
				console.error('WebSocket error:', error);
				updateConnectionStatus('disconnected', '❌', 'Connection error');
			};
		}

		function refreshConnection() {
			reconnectAttempts = 0;
			if (reconnectTimeout) clearTimeout(reconnectTimeout);
			updateConnectionStatus('reconnecting', '🔄', 'Reconnecting...');
			connect();
		}

		function changeUsername() {
			localStorage.removeItem(STORAGE_KEY);
			window.location.href = '/';
		}

		tapBtn.addEventListener('click', () => {
			if (ws && ws.readyState === WebSocket.OPEN) {
				const timestamp = performance.now().toFixed(1);
				ws.send(JSON.stringify({type: 'tap', username, timestamp}));
				tapBtn.disabled = true;
				tapBtn.classList.remove('pulse');
			}
		});

		if (startBtn) {
			startBtn.addEventListener('click', () => {
				if (ws && ws.readyState === WebSocket.OPEN) {
					ws.send(JSON.stringify({type: 'startGame'}));
					startBtn.disabled = true;
					startBtn.classList.remove('pulse');
				}
			});
			startBtn.classList.add('pulse');
		}

		document.addEventListener('visibilitychange', () => {
			if (!document.hidden && ws && ws.readyState !== WebSocket.OPEN) refreshConnection();
		});

		window.addEventListener('beforeunload', () => {
			if (ws) ws.close();
		});

		connect();
	</script>
</body>

</html>
